## Authors: 
##   Christoph Doerbeck
##
## Summary:
##   This playbook intends to do the heavy lifting of configuring the bastion-host based on the paremeters defined in the
##   ansible inventory (config).
##
##   This will configure needed dns services using dnsmasq
##

---
- hosts: myBastion
  tasks:

  - name: "BASTION-DNS: package installation"
    yum: name=dnsmasq state=installed

  - name: "BASTION-DNS: clean cfg directory"
    shell:
      cmd: |
        if [[ -d "/etc/dnsmasq.d" ]] ; then rm -rf /etc/dnsmasq.d/* ; fi

  - name: "BASTION-DNS: deploy standard options"
    vars: 
      - p_nameServer:  "{{ g_pubDNS }}"
    template:
      src: "dnsmasq-standard-opts.j2"
      dest: "/etc/dnsmasq.d/30-standard-opts.conf"
      owner: root

  - name: "BASTION-DNS: deploy PUBLIC wildcard"
    vars: 
      - p_addr:      "{{ hostvars[item]['h_pubIP'] }}"
      - p_domain:    "{{ g_wildcardName }}.{{ g_clusterName }}.{{ g_publicDomain }}"
    when:
      - g_useDNSwildcard == "True"
    template:
      src: "dnsmasq-wildcard-entry.j2"
      dest: "/etc/dnsmasq.d/45-wildcard-{{ g_clusterName }}.conf"
      owner: root
    loop: "{{ groups['myBastion'] }}"

  - name: "BASTION-DNS: cleanup conflicting IPs in /etc/hosts"
    lineinfile:
      dest:   "/etc/hosts"
      regexp: "{{ hostvars[item]['h_pubIP'] }} .*$"
      state:  absent
    loop: "{{ groups['all'] }}"

  - name: "BASTION-DNS: cleanup conflicting names in /etc/hosts"
    lineinfile:
      dest:   "/etc/hosts"
      regexp: ".*{{ item }}.{{ g_pubFQDN }}.*"
      state:  absent
    loop: "{{ groups['all'] }}"

  - name: "BASTION-DNS: add primary hostname entries in /etc/hosts"
    lineinfile:
      dest:   "/etc/hosts"
      line:   "{{ hostvars[item]['h_pubIP'] }} {{ item }}.{{ g_pubFQDN }}"
      state:  present
    when: hostvars[item]['h_pubIP'] is defined
    loop: "{{ groups['all'] }}"

  - name: "BASTION-DNS: add etcd entries in /etc/hosts"
    vars: 
      - p_item:        "{{ item }}"
      - p_name:        "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:        "{{ hostvars[item]['h_pubIP'] }}"
      - p_etcdName:    "{{ hostvars[item]['h_etcdName'] | default('') }}"
      - p_domain:      "{{ g_clusterName }}.{{ g_publicDomain }}"
    replace:
      path:    '/etc/hosts'
      regexp:  '^({{ p_addr }}\b.*)$'
      replace: '\1 {{ p_etcdName }}.{{ p_domain }}'
    when:
      - p_etcdName != ''
    loop: "{{ groups['all'] }}"

  - name: "BASTION-DNS: add api entries in /etc/hosts"
    vars: 
      - p_item:        "{{ item }}"
      - p_name:        "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:        "{{ hostvars[item]['h_pubIP'] }}"
      - p_apiName:     "api"
      - p_domain:      "{{ g_clusterName }}.{{ g_publicDomain }}"
    replace:
      path:    '/etc/hosts'
      regexp:  '^({{ p_addr }}\b.*)$'
      replace: '\1 {{ p_apiName }}.{{ p_domain }}'
    when:
      - g_useHAPROXY == "True" 
    loop: "{{ groups['myBastion'] }}"

  - name: "BASTION-DNS: add comment to /etc/hosts"
    lineinfile:
      dest:   "/etc/hosts"
      line: "## NOTE - additional entries for OCP including the wildcard are in /etc/dnsmasq.d/"
      insertbefore: BOF
      state:  present

  - name: "BASTION-DNS: add firewalld service rules"
    firewalld:
      service: dns
      immediate: yes
      permanent: yes
      state: enabled

  - name: "BASTION-DNS: restart service"
    service: name=dnsmasq state=restarted enabled=yes
