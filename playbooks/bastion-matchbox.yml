## Authors: 
##   Christoph Doerbeck
##
## Summary:
##   Installs matchbox
##   Constructs configuration file fragments in /etc/matchbox/cfg-fragments/*
##   Assembles fragments to /etc/matchbox/*
##   Enables system services
##   Enables firewall services and ports
##

---
- hosts: myBastion
  tasks:

  - name: "BASTION-MATCHBOX: stat software"
    stat: path=/usr/local/src/matchbox-v0.8.3-linux-amd64.tar.gz
    register: test_matchbox_src

  - name: "BASTION-MATCHBOX: software download"
    environment:
      http_proxy: "{{ g_http_proxy }}"
      https_proxy: "{{ g_https_proxy }}"
    get_url:
      url: https://github.com/poseidon/matchbox/releases/download/v0.8.3/matchbox-v0.8.3-linux-amd64.tar.gz
      dest: /usr/local/src/matchbox-v0.8.3-linux-amd64.tar.gz
      mode: "0644"
      timeout: 60
    when: test_matchbox_src.stat.exists == false
    register: matchbox_download
    until: matchbox_download is not failed
    retries: 5

  - name: "BASTION-MATCHBOX: unpack software"
    shell:
      cmd: |
        cd /usr/local/src
        tar zxvf matchbox-v0.8.3-linux-amd64.tar.gz

  - name: "BASTION-MATCHBOX: create matchbox group"
    user:
      name: "matchbox"
      state: present
      password: "*"
    
  - name: "BASTION-MATCHBOX: create matchbox user"
    user:
      name: "matchbox"
      state: present
      system: yes
      password: "*"
      group: "matchbox"

  - name: "BASTION-MATCHBOX: install matchbox binary"
    copy:
      src: /usr/local/src/matchbox-v0.8.3-linux-amd64/matchbox
      dest: /usr/local/bin
      mode: "0555"
      owner: matchbox
      group: matchbox
      remote_src: yes

  - name: "BASTION-MATCHBOX: clean prior cfg directories"
    shell:
      cmd: |
        if [[ -d "{{ item }}" ]] ; then rm -rf "{{ item }}" ; fi
    with_items:
      - "/var/lib/matchbox/groups"
      - "/var/lib/matchbox/profiles"

  - name: "BASTION-MATCHBOX create directories"
    file:
      path: "{{ item }}"
      state: directory
      owner: matchbox
      group: matchbox
      mode: "0755"
    with_items:
      - "/etc/matchbox"
      - "/var/lib/matchbox/assets"
      - "/var/lib/matchbox/groups"
      - "/var/lib/matchbox/profiles"
      - "/var/lib/matchbox/ignition"

  - name: "BASTION-MATCHBOX: debug - file download urls"
    debug: msg="{{ g_rhcos_src }}/{{ item }}"
    with_items:
      - "{{ g_rhcos_initramfs }}"
      - "{{ g_rhcos_kernel }}"
      - "{{ g_rhcos_bios }}"
      - "{{ g_rhcos_iso }}"

  - name: "BASTION-MATCHBOX: Red Hat CoreOS image download"
    environment:
      http_proxy: "{{ g_http_proxy }}"
      https_proxy: "{{ g_https_proxy }}"
    get_url:
      url: "{{ g_rhcos_src }}/{{ item }}"
      dest: "/var/lib/matchbox/assets/{{ item }}"
      owner: matchbox
      group: matchbox
      mode: "0644"
      timeout: 60
    with_items:
      - "{{ g_rhcos_initramfs }}"
      - "{{ g_rhcos_kernel }}"
      - "{{ g_rhcos_bios }}"
      - "{{ g_rhcos_iso }}"
    register: coreos_download
    until: coreos_download is not failed
    retries: 5

  - name: "BASTION-MATCHBOX: Red Hat CoreOS create friendly filenames"
    file:
      state: link
      path: "/var/lib/matchbox/assets/{{ item.dst }}"
      src:  "/var/lib/matchbox/assets/{{ item.src }}"
    with_items:
      - { src: "{{ g_rhcos_initramfs }}" ,dst: "initramfs.img" }
      - { src: "{{ g_rhcos_kernel }}"    ,dst: "kernel.img"    }
      - { src: "{{ g_rhcos_bios }}"      ,dst: "metal.img"     }
      - { src: "{{ g_rhcos_iso }}"       ,dst: "rhcos.iso"     }

  - name: "BASTION-MATCHBOX: : deploy bootstrap group-configs"
    vars:
      - p_profile:  "bootstrap"
      - p_item:     "{{ item }}"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_mac:      "{{ hostvars[item]['h_pubMAC'] }}"
      - p_hw:       "{{ hostvars[item]['h_hwPROF'] }}"
      - p_storage:  "{{ hostvars[item]['h_rhcosDEV'] | default ('sda') }}"
      - p_network:  "{{ hostvars[item]['h_rhosNIC'] | default ('dhcp') }}"
    template:
      src:   "matchbox-group.j2"
      dest:  "/var/lib/matchbox/groups/{{ p_profile }}-{{ p_name }}.json"
      mode:  "644"
      owner: matchbox
      group: matchbox
    loop: "{{ groups['myBootstrap'] }}"

  - name: "BASTION-MATCHBOX: : deploy master group-configs"
    vars:
      - p_profile:  "master"
      - p_item:     "{{ item }}"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_mac:      "{{ hostvars[item]['h_pubMAC'] }}"
      - p_hw:       "{{ hostvars[item]['h_hwPROF'] }}"
      - p_storage:  "{{ hostvars[item]['h_rhcosDEV'] | default ('sda') }}"
      - p_network:  "{{ hostvars[item]['h_rhosNIC'] | default ('dhcp') }}"
    template:
      src:   "matchbox-group.j2"
      dest:  "/var/lib/matchbox/groups/{{ p_profile }}-{{ p_name }}.json"
      mode:  "644"
      owner: matchbox
      group: matchbox
    loop: "{{ groups['myMasters'] }}"

  - name: "BASTION-MATCHBOX: : deploy worker group-configs"
    vars:
      - p_profile:  "worker"
      - p_item:     "{{ item }}"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_mac:      "{{ hostvars[item]['h_pubMAC'] }}"
      - p_hw:       "{{ hostvars[item]['h_hwPROF'] }}"
      - p_storage:  "{{ hostvars[item]['h_rhcosDEV'] | default ('sda') }}"
      - p_network:  "{{ hostvars[item]['h_rhosNIC'] | default ('dhcp') }}"
    template:
      src:   "matchbox-group.j2"
      dest:  "/var/lib/matchbox/groups/{{ p_profile }}-{{ p_name }}.json"
      mode:  "644"
      owner: matchbox
      group: matchbox
    loop: "{{ groups['myWorkers'] }}"

  - name: "BASTION-MATCHBOX: determine bastion pub IP"
    set_fact: 
      f_bastionName: "{{ hostvars[item]['inventory_hostname_short']}}"
      f_bastionIP:   "{{ hostvars[item]['h_pubIP'] }}"
    loop: "{{ groups['myBastion'] }}"

  - name: "BASTION-MATCHBOX: deploy bootstrap profiles"
    vars:
      - p_profile:  "bootstrap"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:     "{{ f_bastionIP }}"
      - p_port:     "{{ g_matchbox_port }}"
      - p_hw:       "{{ hostvars[item]['h_hwPROF'] }}"
      - p_storage:  "{{ hostvars[item]['h_rhcosDEV'] | default ('sda') }}"
      - p_network:  "{{ hostvars[item]['h_rhosNIC'] | default ('dhcp') }}"
    template:
      src:   "matchbox-profile.j2"
      dest:  "/var/lib/matchbox/profiles/{{ p_profile }}-{{ item }}.json"
      mode:  "644"
      owner: matchbox
      group: matchbox
    loop: "{{ groups['myBootstrap'] }}"

  - name: "BASTION-MATCHBOX: deploy master profiles"
    vars:
      - p_profile:  "master"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:     "{{ f_bastionIP }}"
      - p_port:     "{{ g_matchbox_port }}"
      - p_hw:       "{{ hostvars[item]['h_hwPROF'] }}"
      - p_storage:  "{{ hostvars[item]['h_rhcosDEV'] | default ('sda') }}"
      - p_network:  "{{ hostvars[item]['h_rhosNIC'] | default ('dhcp') }}"
    template:
      src:   "matchbox-profile.j2"
      dest:  "/var/lib/matchbox/profiles/{{ p_profile }}-{{ item }}.json"
      mode:  "644"
      owner: matchbox
      group: matchbox
    loop: "{{ groups['myMasters'] }}"

  - name: "BASTION-MATCHBOX: deploy worker profiles"
    vars:
      - p_profile:  "worker"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:     "{{ f_bastionIP }}"
      - p_port:     "{{ g_matchbox_port }}"
      - p_hw:       "{{ hostvars[item]['h_hwPROF'] }}"
      - p_storage:  "{{ hostvars[item]['h_rhcosDEV'] | default ('sda') }}"
      - p_network:  "{{ hostvars[item]['h_rhosNIC'] | default ('dhcp') }}"
    template:
      src:   "matchbox-profile.j2"
      dest:  "/var/lib/matchbox/profiles/{{ p_profile }}-{{ item }}.json"
      mode:  "644"
      owner: matchbox
      group: matchbox
    loop: "{{ groups['myWorkers'] }}"

  - name: "BASTION-MATCHBOX: SELinux restore contexts on doc-root"
    shell: restorecon -R /var/lib/matchbox 

  - name: "BASTION-MATCHBOX: deploy systemd config"
    vars:
      - p_port: "{{ g_matchbox_port }}"
    template:
      src:   "matchbox-systemd.j2"
      dest:  "/etc/systemd/system/matchbox.service"
      mode:  "644"
      owner: root
      group: root

  # Use service_facts module to collect systemd info
  # We can then sanely test existence of units
  # Here are some sample debugs as well
  #   
  #  - debug:
  #      var: ansible_facts.services
  #      var: ansible_facts.services["httpd.service"]

  - name: "BASTION-MATCHBOX: populate system service facts"
    service_facts:
  
  - name: "BASTION-MATCHBOX: stop, disable and mask possible conflicting service (httpd)"
    service: name="httpd" state=stopped enabled=no masked=yes daemon_reload=yes
    when: ansible_facts.services["httpd.service"] is defined

  - name: "BASTION-MATCHBOX: stop, disable and mask possible conflicting service (nginx)"
    service: name="nginx" state=stopped enabled=no masked=yes daemon_reload=yes
    when: ansible_facts.services["nginx.service"] is defined

  - name: "BASTION-MATCHBOX: enable and restart services"
    service: name="{{ item }}" state=restarted enabled=yes masked=no daemon_reload=yes
    with_items:
      - "matchbox"

  - name: "BASTION-MATCHBOX: add firewalld ports and services"
    firewalld:
      port: "{{ item }}"
      immediate: yes
      permanent: yes
      state: enabled
    with_items:
      - "{{ g_matchbox_port }}/tcp"

