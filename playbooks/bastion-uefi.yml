## Authors: 
##   Christoph Doerbeck
##
## Summary:
##   This playbook configures UEFI ISO support for installation of RHCOS
##   
##   Current dhcp model should follow:
##
##   (A) If class is UEFI
##         If iUEFI based, we boot from matchbox 
##         If UEFI based, we chain load with ipxe.efi and try again as iUEFI
##         If  UEFI based, we chain load with undionly and try again as iUEFI
##
##   (B) If class is HTTP
##         Send URL to customized ISO
##
##   This playbook is focused on "setting up" (B)
##   This playbook must run after  bastion-matchbox
##   This playbook must run before bastion-dhcp
##

---
- hosts: myBastion
  tasks:
  
  - name: "BASTION-UEFI: package installation"
    yum: name=genisoimage state=installed

  - name: "BASTION-UEFI: clean-up iso directory /var/tmp/{{ g_clusterName }}/iso"
    shell:
      cmd: |
        if [[ -d "/var/tmp/{{ g_clusterName }}/iso" ]] ; then rm -rf /var/tmp/{{ g_clusterName }}/iso ; fi

  - name: "BASTION-UEFI: create fresh iso work directory for each host"
    file: 
      path="/var/tmp/{{ g_clusterName }}/iso/{{ item }}" 
      mode="0755" 
      state=directory
    loop: "{{ groups['myBootstrap'] + groups['myMasters']  + groups['myWorkers'] }}" 

  - name: "BASTION-UEFI: stat mount point /mnt/rhcos"
    stat: path="/mnt/rhcos"
    register: test_iso_mount

  - name: "BASTION-UEFI: create mount point /mnt/rhcos"
    file: 
      path="/mnt/rhcos" 
      mode="0755" 
      state=directory
    when:
      - test_iso_mount.stat.exists == false

  - name: "BASTION-UEFI: mount source iso /mnt/rhcos"
    vars:
    mount:
      path:   "/mnt/rhcos"
      src:    "/var/lib/matchbox/assets/{{ g_rhcos_iso }}"
      opts:   "loop,ro"
      state:  "mounted"
      fstype: "iso9660"

  - name: "BASTION-UEFI: clone source"
    shell:
      cmd: |
        tar cf - -C /mnt/rhcos . | tar xf - -C /var/tmp/{{ g_clusterName }}/iso/{{ item }}
    loop: "{{ groups['myBootstrap'] + groups['myMasters']  + groups['myWorkers'] }}"

  - name: "BASTION-UEFI: unmount source"
    vars:
    mount:
      path:   "/mnt/rhcos"
      state:  "unmounted"

  - name: "BASTION-UEFI: determine bastion pub IP"
    set_fact:
      f_bastionName: "{{ hostvars[item]['inventory_hostname_short']}}"
      f_bastionIP:   "{{ hostvars[item]['h_pubIP'] }}"
    loop: "{{ groups['myBastion'] }}"

  - name: "BASTION-UEFI: customize isolinux configs"
    vars:
      - p_name:      "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:      "{{ hostvars[item]['h_pubIP'] }}"
      - p_mac:       "{{ hostvars[item]['h_pubMAC'] }}"
      - p_storage:   "{{ hostvars[item]['h_rhcosDEV'] | default ('sda')  }}"
      - p_network:   "{{ hostvars[item]['h_rhcosNIC'] | default ('dhcp') }}"
      - p_nousb:     "{% if hostvars[item]['h_rhcosUSB'] == False %}nousb{% endif %}"
    replace:
      path: /var/tmp/{{ g_clusterName }}/iso/{{ p_name }}/isolinux/isolinux.cfg
      regexp: '(\s+)append(\s+.*)?$'
      replace: '\1append\2 rd.neednet=1 {{ p_nousb }} coreos.inst=yes ip={{ p_network }} coreos.inst.install_dev={{ p_storage }} "coreos.inst.image_url=http://{{ f_bastionIP }}:8080/assets/{{ g_rhcos_bios }}" "coreos.inst.ignition_url=http://{{ f_bastionIP }}:8080/ignition?mac={{ p_mac }}"'
    loop: "{{ groups['myBootstrap'] + groups['myMasters']  + groups['myWorkers'] }}"

  - name: "BASTION-UEFI: customize grub configs"
    vars:
      - p_name:      "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:      "{{ hostvars[item]['h_pubIP'] }}"
      - p_mac:       "{{ hostvars[item]['h_pubMAC'] }}"
      - p_storage:   "{{ hostvars[item]['h_rhcosDEV'] | default ('sda')  }}"
      - p_network:   "{{ hostvars[item]['h_rhcosNIC'] | default ('dhcp') }}"
      - p_nousb:     "{% if hostvars[item]['h_rhcosUSB'] == False %}nousb{% endif %}"
    replace:
      path: /var/tmp/{{ g_clusterName }}/iso/{{ p_name }}/EFI/redhat/grub.cfg
      regexp: '(\s+)linux(\s+.*)?$'
      replace: '\1linux\2 rd.neednet=1 {{ p_nousb }} coreos.inst=yes ip={{ p_network }} coreos.inst.install_dev={{ p_storage }} "coreos.inst.image_url=http://{{ f_bastionIP }}:8080/assets/{{ g_rhcos_bios }}" "coreos.inst.ignition_url=http://{{ f_bastionIP }}:8080/ignition?mac={{ p_mac }}"'
    loop: "{{ groups['myBootstrap'] + groups['myMasters']  + groups['myWorkers'] }}"

  - name: "BASTION-UEFI: for each host generate custom iso image"
    vars:
      - p_name:      "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:      "{{ hostvars[item]['h_pubIP'] }}"
      - p_mac:       "{{ hostvars[item]['h_pubMAC'] }}"
    shell:
      cmd: |
        cd /var/tmp/{{ g_clusterName }}/iso/{{ item }}
        genisoimage -U -r -v -T -J -joliet-long        \
                    -V      "RHCOS-{{p_name}}"         \
                    -volset "RHCOS-{{p_name}}"         \
                    -A      "RHCOS-{{p_name}}"         \
                    -b      isolinux/isolinux.bin      \
                    -c      isolinux/boot.cat          \
                    -no-emul-boot                      \
                    -boot-load-size 4                  \
                    -boot-info-table                   \
                    -eltorito-alt-boot                 \
                    -e images/efiboot.img              \
                    -no-emul-boot                      \
                    -o ../{{ p_name }}.iso .          
    loop: "{{ groups['myBootstrap'] + groups['myMasters']  + groups['myWorkers'] }}"

  - name: "BASTION-UEFI: copy ISOs to asset directory"
    vars:
      - p_name:      "{{ hostvars[item]['inventory_hostname_short']}}"
    copy:
      src:  "/var/tmp/{{ g_clusterName }}/iso/{{ p_name }}.iso"
      dest: "/var/lib/matchbox/assets/{{ g_clusterName }}-{{ p_name }}.iso"
      mode:  "0644"
      owner: root
      group: root
      remote_src: yes
    loop: "{{ groups['myBootstrap'] + groups['myMasters']  + groups['myWorkers'] }}"

