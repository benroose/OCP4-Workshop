---
- hosts: all
  tasks:
  
    - name: "PING all hosts to ensure we are alive and ready"
      ping:


- hosts: workstation
  tasks:

    - name: "TEMPLATE create sample YAML spec files"
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - {src: 'webui-hello-namespace.j2',  dest: '/var/tmp/webui-hello-namespace.yml'}
        - {src: 'webui-hello3-pv.j2',        dest: '/var/tmp/webui-hello3-pv.yml'}
        - {src: 'webui-hello3-claim.j2',     dest: '/var/tmp/webui-hello3-claim.yml'}
        - {src: 'webui-hello5-bc.j2',        dest: '/var/tmp/webui-hello5-bc.yml'}
  
    - name: "FILE create path for exports/helloworld"
      file: 
        path=/exports/helloworld
        state=directory

    - name: "TEMPLATE create /exports/helloworld/index.html"
      template:
        src: helloworld-html.j2
        dest: /exports/helloworld/index.html
        owner: root
        group: root
        mode: 0644

    - name: "SERVICE enable and start nfs"
      service: 
        name="{{ item.name }}"
        state=started 
        enabled=yes
      with_items:
        - { name: 'nfs' }
        - { name: 'nfslock' }

    - name: "TEMPLATE modify/install /etc/exports"
      template:
        src: nfsexports.j2
        dest: /etc/exports
        owner: root
        group: root
        mode: 644
        
    - name: "CMD export nfs filesystems"
      shell: 
        cmd: |
          exportfs -a

- hosts: masters
  tasks:
  
    - name: "TEMPLATE create /var/tmp/helloworld.html"
      template:
        src: helloworld-html.j2
        dest: /var/tmp/helloworld.html
        owner: root
        group: root
        mode: 0644

    - name: "TEMPLATE install cheat-(scripts) in /var/tmp"
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: 0744
      with_items:
        - {src: 'cheat-install-helloworld.j2',         dest: '/usr/local/bin/cheat-install-helloworld.sh'}
        - {src: 'cheat-validate-app.j2',               dest: '/usr/local/bin/cheat-validate-app.sh'}
        - {src: 'cheat-validate-service.j2',           dest: '/usr/local/bin/cheat-validate-service.sh'}
        - {src: 'cheat-rsh-pod.j2',                    dest: '/usr/local/bin/cheat-rsh-pod.sh'}
        - {src: 'cheat-patch-namespace-helloworld.j2', dest: '/usr/local/bin/cheat-patch-namespace-helloworld.sh'}

    - name: "TEMPLATE install sample YAML spec file"
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - {src: 'cli-hello3-pv.j2',    dest: '/var/tmp/cli-hello3-pv.yml'}
        - {src: 'cli-hello3-claim.j2', dest: '/var/tmp/cli-hello3-claim.yml'}
        
    - name: "CMD deleting existing OCP router"
      shell: 
        cmd: |
          oc login -u system:admin
          oc project default
          oc delete all -l router=router         

    - name: "CMD creating new OCP router with replicas=2"
      shell: 
        cmd: |
          oc login -u system:admin
          oc project default
          oc adm router --replicas=2 --service-account=router

    - name: "CMD creating OCP admin user with cluster admin role"
      shell: 
        cmd: |
          oc login -u system:admin
          htpasswd -b /etc/origin/master/htpasswd admin redhat
          oc adm policy add-cluster-role-to-user cluster-admin admin

    - name: "CMD creating workshop-src pod for hellowolrd"
      shell: 
        cmd: |
          oc login -u system:admin
          oc project default
          if oc project workshop-src ; then
            echo "Project already exists"
          else
            oc new-project workshop-src --description="Sources for Helloworld" --display-name="Workshop Source"
            oc new-app registry.access.redhat.com/rhscl/httpd-24-rhel7~https://github.com/xtophd/OCP-Workshop --context-dir=/src/helloworld --name=workshop-src
            oc expose service workshop-src --hostname=workshop-src.cloud.example.com
          fi
          oc project default


- hosts: all
  tasks:
  
    - name: "CMD cleaning yum content"
      shell: 
        cmd: |
          yum clean all
          
    - name: "TEMPLATE placing openshift-install-completed file"
      template:
        src: "install-completed-msg.j2"
        dest: "/root/openshift-install-completed.txt"
        owner: root
        group: root
        mode: 0644
