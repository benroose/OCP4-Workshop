---
- hosts: nodes
  tasks:
  
    - name: "CMD enable yum  repos for ocp 3.11"
      shell: 
        cmd: |          
          sed -i 's/enabled=0/enabled=1/g' /etc/yum.repos.d/ose3.11-latest.repo

    - name: "CMD disable yum plugins for rhn and subscription-manager"
      shell: 
        cmd: |          
          sed -i 's/enabled=1/enabled=0/g' /etc/yum/pluginconf.d/rhnplugin.conf
          sed -i 's/enabled=1/enabled=0/g' /etc/yum/pluginconf.d/subscription-manager.conf
          sed -i 's/enabled=1/enabled=0/g' /etc/yum/pluginconf.d/product-id.conf
    
    - name: "USER create and/or reset users"
      user: name="{{ item.name }}" password="{{ item.password }}"
      with_items:
        - {name: 'root', password: '$5$PK7KM9pT$AehNIMYtW22TEE.D0U3ORWCDFMFvARwJLf8YPvVgAf.'}
        - {name: 'student', password: '$5$OJx9uJm8$4VYM2llNxqX/7I4M3vXZM8ZJ9FE2msmHpcOqXlDesC8'}
      
    - name: "TEMPLATE modify /etc/motd"
      template:
        src: motd-openshift.j2
        dest: /etc/motd
        owner: root
        group: root
        mode: 0644

    - name: "YUM install misc packages"
      yum: name=wget,git,net-tools,bind-utils,yum-utils,iptables-services,bridge-utils,bash-completion,kexec-tools,sos,psacct,firewalld,lynx state=installed

    - name: "SERVICE STOP firewalld"
      service: name=firewalld state=stopped enabled=yes masked=no

    - name: "CMD flushing any existing iptable rules"
      shell: 
        cmd: |
          iptables -F

    - name: "SERVICE START firewalld"
      service: name=firewalld state=started enabled=yes masked=no

    - name: "YUM uninstall docker (openshift installer will add it back)"
      yum: name=docker state=absent

    - name: "FILE remove /etc/sysconfig/docker-storage-setup"
      file: path=/etc/sysconfig/docker-storage-setup state=absent

    - name: "CMD (STORAGE CLEANUP) unmount previous filesystems"
      shell:
        cmd: |
          if grep -q {{ item.mount }} /proc/mounts ; then umount {{ item.mount }} ; fi
      with_items:
        - {dev: "{{ myDockerDev }}", vg: "{{ myDockerVG }}", lv: "{{ myDockerLV }}",    mount: '/var/lib/docker'}

    - name: "CMD (STORAGE CLEANUP) cleanup previous volumegroups and physical volumes"
      shell:
        cmd: |
          if vgs "{{ item.vg }}" ; then vgremove --force "{{ item.vg }}" ; fi
          if pvs "{{ item.dev }}" ; then  pvremove --force "{{ item.dev }}" ; fi
      with_items:
        - {dev: "{{ myDockerDev }}", vg: "{{ myDockerVG }}", lv: "{{ myDockerLV }}",    mount: '/var/lib/docker'}

    - name: "CMD (STORAGE CLEANUP) wipe devices"
      shell:
        cmd: |
          wipefs -a "{{ item.dev }}"
      with_items:
        - {dev: "{{ myDockerDev }}", vg: "{{ myDockerVG }}", lv: "{{ myDockerLV }}",    mount: '/var/lib/docker'}

    - name: "CMD (STORAGE PREP) set up storage requirements (PV, VG, LV)"
      shell:
        cmd: |
          pvcreate "{{ myDockerDev }}"
          vgcreate "{{ myDockerVG }}" "{{ myDockerDev }}"
          lvcreate -l 100%FREE   -n "{{ myDockerLV}}" "{{ myDockerVG }}"
      with_items:
        - {dev: "{{ myDockerDev }}", vg: "{{ myDockerVG }}", lv: "{{ myDockerLV }}",    mount: '/var/lib/docker'}

    - name: "CMD (STORAGE PREP) create filesystems, mount points and fstab entries"
      shell:
        cmd: |
          mkfs -t xfs /dev/{{ item.vg }}/{{ item.lv }}
          mkdir -p {{ item.mount }}
          grep -q {{ item.mount }} /etc/fstab || echo "/dev/{{ item.vg }}/{{ item.lv }} {{ item.mount }} xfs defaults 0 0" >> /etc/fstab
      with_items:
        - {dev: "{{ myDockerDev }}", vg: "{{ myDockerVG }}", lv: "{{ myDockerLV }}",    mount: '/var/lib/docker'}

    - name: "CMD (STORAGE PREP) mount everything"
      shell:
        cmd: |
          mount -a

################################################################################
##
## The 3.11 installer handles this stuff now
##
##
##
##
#    - name: "TEMPLATE install /etc/sysconf/docker-storage-setup"
#      template:
#        src: docker-storage-setup.j2
#        dest: /etc/sysconfig/docker-storage-setup
#        owner: root
#        group: root
#        mode: 0644
##
##
##
#    - name: "CMD prepare and wipe docker storage"
#      shell: 
#        cmd: |
#          rm -f /etc/sysconfig/docker-storage
#          rm -rf /var/lib/docker
#          vgs docker-vg && vgremove --force docker-vg
#          pvs {{ myDockerDev }} && pvremove --force {{ myDockerDev }}
#          wipefs -a {{ myDockerDev }}
##
##
##
#    - name: "CMD configure docker storage"
#      shell: 
#        cmd: |         
#          docker-storage-setup
##
##
##
#    - name: "SERVICE start docker daemon"
#      service: name=docker state=started enabled=yes
################################################################################

    ## *** WARNING *** WARNING *** WARNING *** WARNING *** WARNING *** 
    ##
    ##   We SHOULD use an appropriate perf profile in the real world,
    ##   but we should NEVER enable nobarrier in the real world.
    ##
    ## *** WARNING *** WARNING *** WARNING *** WARNING *** WARNING *** 
    
    - name: "CMD change performance profile (**WARNING** NOT FOR PRODUCTION)"
      shell:                                                                                           
        cmd: |                                                                                         
          tuned-adm profile virtual-guest                                                              
          mount -o remount,nobarrier /                                                                 

- hosts: masters
  tasks:
  
    - name: "YUM install httpd-utils"
      yum: name=httpd-tools state=installed

    - name: "CMD creating /root/htpasswd.openshift"
      shell:
        cmd: |
          htpasswd -c -b /root/htpasswd.openshift admin redhat

- hosts: glusterfs

  tasks:
    - name: "CMD wipe glusterfs storage"
      shell: 
        cmd: |
          wipefs -a {{ myGlusterDev }}
          
  
