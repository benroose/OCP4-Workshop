## Authors: 
##   Christoph Doerbeck
##
## Summary:
##   This playbook intends to do the heavy lifting of configuring the bastion-host based on the paremeters defined in the
##   ansible inventory (config).
##
##   It will install missing packages, pull (wget) openshift installer, rhcos, etc...
##
## Playbook Assumptions:
##     #1 you are executing this on the bastion-host
##     #2 you have configured and copied ssh-keys to itself.  Meaning, ssh root@localhost works without a password
##     #3 you have completed adjustments to ../configs/ocp4poc-default
##

---
- hosts: myBastion
  tasks:
  
  - name: "BASTION-SETUP: install additional packages"
    yum: name=ansible,git,tree,wget,bind-utils state=installed
      


  - name: "BASTION-SETUP: dnsmasq installation"
    yum: name=dnsmasq state=installed
    when:
      - g_useDNS == "True"



  - name: "BASTION-SETUP: dnsmasq deploy standard options"
    vars: 
      - p_nameServer:  "{{ g_publicNameServer }}"
    when:
      - g_useDNS == "True" 
    template:
      src: "dnsmasq-standard-opts.j2"
      dest: "/etc/dnsmasq.d/30-standard-opts.conf"
      owner: root



  - name: "BASTION-SETUP: dnsmasq deploy PUBLIC HOST configs"
    vars: 
      - p_item:     "{{ item }}"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:     "{{ hostvars[item]['h_pubIP'] }}"
      - p_mac:      "{{ hostvars[item]['h_pubMAC'] }}"
      - p_etcdName: "{{ hostvars[item]['h_etcdName'] | default('') }}"
      - p_revAddr:  "{{ (p_addr.split('.'))[::-1]|join('.') }}"
      - p_netmask:  "{{ g_publicNetmask }}"
      - p_gateway:  "{{ g_publicGateway'] }}"
      - p_domain:   "{{ g_publicDomain }}"
    when:
      - g_publicNet == "True" 
      - g_useDNS == "True"
    template:
      src: "dnsmasq-host-entry.j2"
      dest: "/etc/dnsmasq.d/50-dns-{{ p_domain }}-{{ p_name }}.conf"
      owner: root
      group: root
      mode: 644
    loop: "{{ groups['all'] }}"



  - name: "BASTION-SETUP: dnsmasq deploy PRIVATE HOST configs"
    vars: 
      - p_item:     "{{ item }}"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:     "{{ hostvars[item]['h_priIP'] }}"
      - p_mac:      "{{ hostvars[item]['h_priMAC'] }}"
      - p_etcdName: "{{ hostvars[item]['h_etcdName'] | default('') }}"
      - p_revAddr:  "{{ (p_addr.split('.'))[::-1]|join('.') }}"
      - p_netmask:  "{{ g_privateNetmask }}"
      - p_gateway:  "{{ g_privateGateway'] }}"
      - p_domain:   "{{ g_privateDomain }}"
    when:
      - g_privateNet == "True" 
      - g_useDNS == "True"
    template:
      src: "dnsmasq-host-entry.j2"
      dest: "/etc/dnsmasq.d/50-dns-{{ p_domain }}-{{ p_name }}.conf"
      owner: root
      group: root
      mode: 644
    loop: "{{ groups['all'] }}"



  - name: "BASTION-SETUP: dnsmasq deploy ETCD configs"
    vars: 
      - p_item:      "{{ item }}"
      - p_name:      "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:      "{{ hostvars[item]['h_pubIP'] }}"
      - p_etcdName:  "{{ hostvars[item]['h_etcdName'] | default('') }}"
      - p_domain:    "{{ g_publicDomain }}"
      - p_cloudName: "{{ g_cloudName }}"
    when:
      - g_useDNS == "True"
      - p_etcdName != ""
    template:
      src: "dnsmasq-etcd-entry.j2"
      dest: "/etc/dnsmasq.d/45-etcd-{{ p_etcdName }}.conf"
      owner: root
      group: root
      mode: 644
    loop: "{{ groups['all'] }}"



  - name: "BASTION-SETUP: dnsmasq deploy PUBLIC wildcard"
    vars: 
      - p_addr:      "{{ hostvars['bastion']['h_pubIP'] }}"
      - p_domain:    "{{ g_publicDomain }}"
      - p_cloudName: "{{ g_cloudName }}"
    when:
      - g_useDNS == "True" 
      - g_useDNSwildcard == "True"
    template:
      src: "dnsmasq-wildcard-entry.j2"
      dest: "/etc/dnsmasq.d/45-wildcard-{{ g_cloudName }}.conf"
      owner: root



  - name: "BASTION-SETUP: dnsmasq deploy PXE config"
    vars: 
      - p_name:      "{{ hostvars['bastion']['inventory_hostname_short']}}"
      - p_addr:      "{{ hostvars['bastion']['h_pubIP'] }}"
      - p_domain:    "{{ g_publicDomain }}"
      - p_cloudName: "{{ g_cloudName }}"
    when:
      - g_useDNS == "True" 
      - g_usePXE == "True"
    template:
      src: "dnsmasq-pxe-entry.j2"
      dest: "/etc/dnsmasq.d/40-pxe-opts.conf"
      owner: root



  - name: "BASTION-SETUP: dnsmasq deploy API config"
    vars: 
      - p_addr:      "{{ hostvars['bastion']['h_pubIP'] }}"
      - p_domain:    "{{ g_publicDomain }}"
      - p_cloudName: "{{ g_cloudName }}"
      - p_revAddr:   "{{ (p_addr.split('.'))[::-1]|join('.') }}"
    when:
      - g_useDNS == "True" 
    template:
      src: "dnsmasq-api-entry.j2"
      dest: "/etc/dnsmasq.d/45-api-{{ g_cloudName }}.conf"
      owner: root



  - name: "BASTION-SETUP: dnsmasq restart service"
    when: g_useDNS == "True"
    service: name=dnsmasq state=restarted enabled=yes



  - name: "BASTION-SETUP: dnsmasq add firewall rule"
    when: g_useDNS == "True" 
    firewalld:
      service: dns
      immediate: yes
      permanent: yes
      state: enabled



  - name: "BASTION-SETUP: tftp installation"
    yum: name=tftp-server,ipxe-bootimgs state=installed
    when: g_usePXE == "True"



  - name: "BASTION-SETUP: tftp create directory"
    when: g_usePXE == "True"
    file:
      path: /var/lib/tftpboot
      mode: "0755"
      state: directory



  - name: "BASTION-SETUP: tftp copy file"
    copy: 
      src: /usr/share/ipxe/undionly.kpxe
      dest: /var/lib/tftpboot
      mode: "0644"
      owner: root
      group: root
      remote_src: yes



  - name: "BASTION-SETUP: tftp restart service"
    when: g_usePXE == "True"
    service: name=tftp state=restarted enabled=yes



  - name: "BASTION-SETUP: tftp add firewall rule"
    when: g_usePXE == "True" 
    firewalld:
      service: tftp
      immediate: yes
      permanent: yes
      state: enabled



##
## VALIDATION TESTS ##
##



  - name: "BASTION-SETUP: TEST PUBLIC dns"
    vars: 
      - p_server:  "localhost"
      - p_name:    "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:    "{{ hostvars[item]['h_pubIP'] }}"
      - p_domain:  "{{ g_publicDomain }}"
    when:
      - g_useDNS == "True" 
      - g_publicNet == "True" 
    shell: 
      cmd: |
        dig @{{ p_server }} {{ p_name }}.{{ p_domain }} +short
        dig -x @{{ p_server }} {{ p_addr }} +short
    loop: "{{ groups['all'] }}"
    changed_when: false



  - name: "BASTION-SETUP: TEST PRIVATE dns"
    vars: 
      - p_server:  "localhost"
      - p_name:    "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:    "{{ hostvars[item]['h_priIP'] }}"
      - p_domain:  "{{ g_privateDomain }}"
    when:
      - g_useDNS == "True" 
      - g_publicNet == "True" 
    shell: 
      cmd: |
        dig @{{ p_server }} {{ p_name }}.{{ p_domain }} +short
        dig -x @{{ p_server }} {{ p_addr }} +short
    loop: "{{ groups['all'] }}"
    changed_when: false



  - name: "BASTION-SETUP: TEST WILDCARD dns"
    vars: 
      - p_server:  "localhost"
      - p_name:    "{{ g_cloudName }}"
      - p_domain:  "{{ g_publicDomain }}"
    when:
      - g_useDNS == "True" 
      - g_publicNet == "True" 
    shell: 
      cmd: |
        dig @{{ p_server }} {{ p_name }}.{{ p_domain }} +short
    changed_when: false



