## Authors: 
##   Christoph Doerbeck
##
## Summary:
##   This playbook attempts to configure the minimum requirements (ideally) to prepare a blueprint.
##   This playbook is NOT meant for student execution
##     IE: You would run this and then snap the blueprint for the workshops.
##
## Playbook Assumptions:
##     #1 you are executing this on the bastion-host
##     #2 your client is registered to RH CDN with subscription-manager
##     #3 the following packages have been installed: git, ansible
##

---
- hosts: myBastion
  tasks:


  
  - name: "Yum install additional packages"
    yum: name=ansible,git,tree,wget,yum-utils,firewalld,httpd,net-tools state=installed



  - name: "Httpd Default Configuration"
    vars:
      - p_port: "{{ g_httpPort }}"
    when: g_repoSync == "True"
    template:
      src: "httpd-conf.j2"
      dest: "/etc/httpd/conf/httpd.conf"
      owner: root
      group: root
      mode: 0644



  - name: "Systemd services enabled"
    service: name={{ item }} state=restarted enabled=yes masked=no
    with_items:
      - "firewalld"
      - "httpd"



  - name: "Firewalld services added"
    firewalld:
      service: http
      immediate: yes
      permanent: yes
      state: enabled



  - name: "User create and/or reset"
    user: name="{{ item.name }}" password="{{ item.password }}"
    with_items:
      - {name: 'root', password: '$6$9Jk5EGiB2aBl95kj$RIdiSqNdKt95zqddStFUY/zVKIUujWfGWJkLM5KQ.7zY88Kxxa0qm78qLMFRAqDO2qOrp.qZBaQAKcUFm1Is70'}
      - {name: '{{ g_studentName }}', password: '$6$9Jk5EGiB2aBl95kj$RIdiSqNdKt95zqddStFUY/zVKIUujWfGWJkLM5KQ.7zY88Kxxa0qm78qLMFRAqDO2qOrp.qZBaQAKcUFm1Is70'}



  - name: "Sudoers Configuration"
    template:
      src: "sudoers.j2"
      dest: "/etc/sudoers.d/ocp4-workshop"
      owner: root
      group: root
      mode: 0600



  - name: "Subscription Manager enable specified repos only"
    rhsm_repository: 
      name: "{{ g_repoList }}" 
      purge: True



  - name: "Clone repos"
    when: g_repoSync == "True"
    shell: reposync --newest-only --destdir={{ g_repoDestDir }} --repoid={{ item }}
    loop: "{{ g_repoList }}"


 
  - name: "Create sample repo configs"
    when: g_repoSync == "True"
    template:
      src: "repo-config.j2"
      dest: "{{ g_repoDestDir }}/{{ item }}.repo"
      owner: root
      group: root
      mode: 0444
    loop: "{{ g_repoList }}"



  - name: "SELinux restore contexts"
    when: g_repoSync == "True"
    shell: restorecon -R {{ g_repoDestDir }}


    
    
