
subnet {{ p_network }} netmask {{ p_netmask }} {
  
    option domain-name         "{{ p_cluster }}.{{ p_domain }}";
    option domain-name-servers {{ p_dns }};
    option routers             {{ p_gateway }};
    option broadcast-address   {{ p_broadcast }};
    option subnet-mask         {{ p_netmask }};

{%if p_ntp is defined and p_ntp|length %}
    option ntp-servers         {{ p_ntp }};
{% endif %}

{% if g_usePXE == 'True' %}
  class "pxeclients" {	

    option vendor-class-identifier "PXEClient";
    match if substring (option vendor-class-identifier, 0, 9) = "PXEClient";

    next-server {{ p_nextsvr }};

    if exists user-class and option user-class = "iPXE" {

      ## If client supports iPXE

      ## BOOT.IPXE - is a *magic* file dynamically 
      ##             generated by matchboxd running on p_nextsvr

      log(info, "dhcpd-debug: (ipxe) filename http://{{ p_nextsvr }}:8080/boot.ipxe ");

      filename "http://{{ p_nextsvr }}:8080/boot.ipxe";

    } elsif option client-system-arch = 00:07 or option client-system-arch = 00:09 {

      ## If client is UEFI, chainload an iPXE UEFI capable client, retry

      log(info, "dhcpd-debug: (uefi pxe) chain loading ipxe-x86_64.efi");

      filename "ipxe-x86_64.efi";

    } else {

      ## If client is Legacy BIOS, chainload an iPXE BIOS capable client, retry
      ##

      log(info, "dhcpd-debug: (legacy pxe) chain loading undionly.kpxe");

      filename "undionly.kpxe";
    } 
  }
{% endif %}

{% if g_useUEFI_HTTP == 'True' %}
  class "httpclients" {	

    option vendor-class-identifier "HTTPClient";
    match if substring (option vendor-class-identifier, 0, 10) = "HTTPClient";

    ## Because I need to provide a custom iso for any host using this method,
    ## we just set a varilable here and specify the filename in the host section
 
    set uefi_http_iso = "true";

    ## Send a little output to log
    ## log(info, concat ("dhcpd-debug: (uefi http) uefi_http_iso = ", uefi_http_iso));

    log(info, "dhcpd-debug: (uefi http) setting uefi_http_iso = true");

  }
{% endif %}
}

