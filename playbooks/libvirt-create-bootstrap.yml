## Authors: 
##   Christoph Doerbeck
##
## Summary:
##
##
##

---
- hosts: myVirthost

  tasks:

  - include_vars: "{{ item }}"
    with_first_found: "{{ vars_libvirt }}"

  - include_vars: "{{ item }}"
    with_first_found: "{{ vars_rs_profiles }}"

  - include_vars: "{{ item }}"
    with_first_found: "{{ vars_hw_profiles }}"

  - include_vars: "{{ item }}"
    with_first_found: "{{ vars_matchbox }}"

  - debug:
      var: kvm_cfg

  - debug:
      var: rs_profile[hostvars[item]['h_rsPROF']]
    loop: "{{ groups['myBootstrap'] }}"

  - debug:
      var: hw_profile[hostvars[item]['h_hwPROF']]
    loop: "{{ groups['myBootstrap'] }}"

  - name: "LIBVIRT-CREATE-BOOTSTRAP: Create ssh directory"
    file:
      path: "{{ kvm_cfg.qcow_dir }}"
      mode: "0775"
      state: directory

  ##
  ## A generic set of tests to verify bastion services are up
  ##

  - name: "LIBVIRT-CREATE-BOOTSTRAP: determine bastion IP address"
    set_fact:
      f_bastion_ip: "{{ hostvars[item]['h_pubIP'] }}"
    loop: "{{ groups['myBastion'] }}"

  - name: "LIBVIRT-CREATE-BOOTSTRAP: test DNS port on bastion {{ f_bastion_ip }}"
    when: g_useDNS == "True"
    wait_for:
      host: "{{ f_bastion_ip }}"
      connect_timeout: 5
      delay: 3
      port: 53 
      sleep: 1
      state: started
      timeout: 30

#### DHCP is a UDP service, cannot wait_for this
#    Need an alternate solution
#
#  - name: "LIBVIRT-CREATE-BOOTSTRAP: test DHCP port on bastion ({{ f_bastion_ip }})"
#    when: g_useDHCP == "True"
#    wait_for:
#      host: "{{ f_bastion_ip }}"
#      connect_timeout: 5
#      delay: 3
#      port: 67
#      sleep: 1
#      state: present
#      timeout: 30

  - name: "LIBVIRT-CREATE-BOOTSTRAP: test MATCHBOX port on bastion ({{ f_bastion_ip }})"
    when: g_useMATCHBOX == "True"
    wait_for:
      host: "{{ f_bastion_ip }}"
      connect_timeout: 5
      delay: 3
      port: "{{ g_matchbox_port }}"
      sleep: 1
      state: started
      timeout: 30

  - name: "LIBVIRT-CREATE-BOOTSTRAP: virt-install bootstrap"
    vars:
      p_name:     "{{ hostvars[item]['inventory_hostname_short'] }}"
      p_bus:      "{{ hw_profile[hostvars[item]['h_hwPROF']].disk.bus }}"
      p_sparse:   "{{ hw_profile[hostvars[item]['h_hwPROF']].disk.sparse }}"
      p_netdev:   "{{ hw_profile[hostvars[item]['h_hwPROF']].network.model }}"
      p_disksize: "{{ rs_profile[hostvars[item]['h_rsPROF']].disksize }}"
      p_memsize:  "{{ rs_profile[hostvars[item]['h_rsPROF']].memsize }}"
      p_cpu:      "{{ rs_profile[hostvars[item]['h_rsPROF']].vcpus }}"
    shell:
      cmd: |
        virt-install --name="{{ p_name }}" \
                     --ram="{{ p_memsize }}" \
                     --disk "{{ kvm_cfg.qcow_dir }}/{{ p_name }}.qcow2,bus={{ p_bus }},sparse={{ p_sparse }},size={{ p_disksize }}" \
                     --check disk_size=off \
                     --network "network={{ kvm_cfg.network.name }},mac={{ hostvars[item]['h_pubMAC'] }},model={{ p_netdev }}" \
                     --graphics vnc \
                     --vcpus {{ p_cpu }} \
                     --boot hd,network,menu=yes \
                     --noautoconsole
    loop: "{{ groups['myBootstrap'] }}"

