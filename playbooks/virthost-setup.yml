## Authors: 
##   Christoph Doerbeck
##
## Summary:
##   This playbook attempts to configure a rhel 8.0 (or later) system with libvirt
##   to host an openshift 4.2 deployment
##
##   This playbook is NOT meant for student execution  
##
##   This playbook IS meant for someone who'd like to stand up Openshift on a single node
##
## Playbook Assumptions:
##     #1 you are executing this on the OS already installed on bare-metal
##     #2 your host is registered to RH CDN with subscription-manager
##     #3 the following packages have been installed: git, ansible
##     #4 system has plenty of storage and memory
##

---
- hosts: myVirthost
  tasks:

  - name: "YUM: install additional packages"
    yum: name=ansible,git,tree,wget,yum-utils,firewalld,httpd,net-tools,cockpit,cockpit-machines state=installed

  - name: "TEMPLATE: deploy httpd configuration"
    vars:
      - p_port: "80"
    when: g_repoSync == "True"
    template:
      src: "httpd-conf.j2"
      dest: "/etc/httpd/conf/httpd.conf"
      owner: root
      group: root
      mode: 0644

  - name: "TEMPLATE: deploy httpd configuration"
    template:
      src: "bastion-kickstart.j2"
      dest: "/var/www/html/ks.cfg"
      owner: root
      group: apache
      mode: 0644

  - name: "SERVICE: enable multiple services"
    service: name="{{ item }}" state=restarted enabled=yes masked=no
    with_items:
      - "firewalld"
      - "httpd"
      - "cockpit"
      - "libvirtd"

  - name: "FIREWALLD: add services"
    firewalld:
      service: "{{ item }}"
      immediate: yes
      permanent: yes
      state: enabled
    with_items:
      - "http"
      - "https"
      - "cockpit"

  - name: "SHELL: use rhsm to disable all repos"
    shell: subscription-manager repos --disable=* 

  - name: "SHELL: use rhsm to enable repos"
    shell: subscription-manager repos --enable="{{ item }}" 
    with_items: 
      - "rhel-7-server-rpms"
      - "rhel-7-server-optional-rpms"
      - "rhel-7-server-extras-rpms"

#  - name: "SHELL: disable libvirt 'default' network"
#    shell:
#      cmd: |
#        if `virsh net-list | grep -q default` ; then 
#          virsh net-destroy default
#          virsh net-autostart --network default --disable
#        fi
#
#  - name: "SERVICE: restart service libvirtd"
#    service: name=libvirtd state=restarted enabled=yes masked=no

##
## nmcli con add type bridge con-name virbr-pub ifname enp0s31f6 autoconnect yes bridge.stp no ipv6.method ignore connection.autoconnect-slaves yes
##

## For RHEL 8 (ansible 2.5)
#  - name: "Subscription Manager enable specified repos only"
#    rhsm_repository: 
#      name: "{{ item }}"
#      purge: True
#      state: enabled

#  - name: "Subscription Manager enable specified repos only"
#    rhsm_repository: 
#      name: "{{ item }}"
#      purge: True
#    loop: "{{ g_repoList }}"

#  - name: "Clone repos"
#    when: g_repoSync == "True"
#    shell: reposync --newest-only --destdir={{ g_repoDestDir }} --repoid={{ item }}
#    loop: "{{ g_repoList }}"
# 
#  - name: "Create sample repo configs"
#    when: g_repoSync == "True"
#    template:
#      src: "repo-config.j2"
#      dest: "{{ g_repoDestDir }}/{{ item }}.repo"
#      owner: root
#      group: root
#      mode: 0444
#    loop: "{{ g_repoList }}"
#
#  - name: "SELinux restore contexts"
#    when: g_repoSync == "True"
#    shell: restorecon -R {{ g_repoDestDir }}


#  - name: "Subscription Manager enable specified repos only"
#    rhsm_repository: 
#      name: "{{ g_repoList }}" 
#      purge: True
#
#  - name: "Clone repos"
#    when: g_repoSync == "True"
#    shell: reposync --newest-only --destdir={{ g_repoDestDir }} --repoid={{ item }}
#    loop: "{{ g_repoList }}"
# 
#  - name: "Create sample repo configs"
#    when: g_repoSync == "True"
#    template:
#      src: "repo-config.j2"
#      dest: "{{ g_repoDestDir }}/{{ item }}.repo"
#      owner: root
#      group: root
#      mode: 0444
#    loop: "{{ g_repoList }}"
#
#  - name: "SELinux restore contexts"
#    when: g_repoSync == "True"
#    shell: restorecon -R {{ g_repoDestDir }}

