## Authors: 
##   Christoph Doerbeck
##
## Summary:
##   This playbook attempts to configure a rhel 8.0 (or later) system with libvirt
##   to host an openshift 4.2 deployment
##
##   This playbook is NOT meant for student execution  
##
##   This playbook IS meant for someone who'd like to stand up Openshift on a single node
##
## Playbook Assumptions:
##     #1 you are executing this on the OS already installed on bare-metal
##     #2 your host is registered to RH CDN with subscription-manager
##     #3 the following packages have been installed: git, ansible
##     #4 system has plenty of storage and memory
##

---
- hosts: myVirthost

  tasks:

  - include_vars: "{{ item }}"
    with_first_found: "{{ vars_libvirt }}"

  - name: "LIBVIRT-SETUP: create html directory"
    file:
      path: "{{ kvm_cfg.iso.dir }}"
      mode: "0775"
      owner: "root"
      group: "root"
      state: directory

  - name: "LIBVIRT-SETUP: stat RHEL ISO"
    stat: path="{{ kvm_cfg.iso.dir }}/{{ kvm_cfg.iso.name }}"
    register: test_rhel_iso

  - name: "LIBVIRT-SETUP: fail if RHEL ISO absent"
    fail: msg="COPY YOUR RHEL ISO HERE {{ kvm_cfg.iso.dir }}/{{ kvm_cfg.iso.name }}"
    when: test_rhel_iso.stat.exists == false

  - name: "LIBVIRT-SETUP: use rhsm to disable all repos"
    shell: cmd="subscription-manager repos --disable=*"

  - name: "LIBVIRT-SETUP: use rhsm to enable repos"
    shell: cmd="subscription-manager repos --enable='{{ item }}'" 
    with_items: 
      - "rhel-7-server-rpms"
      - "rhel-7-server-optional-rpms"
      - "rhel-7-server-extras-rpms"

  - name: "LIBVIRT-SETUP: install additional packages"
    yum: name=ansible,git,tree,wget,yum-utils,firewalld,httpd,net-tools,cockpit,cockpit-machines state=installed

  - name: "LIBVIRT-SETUP: deploy httpd configuration"
    vars:
      - p_port: "80"
    template:
      src: "httpd-conf.j2"
      dest: "/etc/httpd/conf/httpd.conf"
      owner: root
      group: root
      mode: 0644

  - name: "LIBVIRT-SETUP: deploy kickstart configuration"
    template:
      src: "bastion-kickstart.j2"
      dest: "/var/www/html/ks.cfg"
      owner: root
      group: apache
      mode: 0644

  - name: "LIBVIRT-SETUP: selinux restorecon on /var/www/html"
    shell: restorecon -R /var/www/html

  - name: "LIBVIRT-SETUP: enable system services"
    service: name="{{ item }}" state=restarted enabled=yes masked=no
    with_items:
      - "firewalld"
      - "httpd"
      - "cockpit"
      - "libvirtd"

  - name: "LIBVIRT-SETUP: add firewalld services"
    firewalld:
      service: "{{ item }}"
      immediate: yes
      permanent: yes
      state: enabled
    with_items:
      - "http"
      - "https"
      - "cockpit"

  - name: "LIBVIRT-SETUP: test existence of libvirt network ({{ kvm_cfg.network.name }})"
    shell: 
      cmd: |
        virsh net-info "{{ kvm_cfg.network.name }}"
    ignore_errors: yes
    register: test_libvirt_network

  - debug: msg="Network Test Result Code = {{ test_libvirt_network.rc }}"

  - name: "LIBVIRT-SETUP: test for valid network.fwd_type ({{ kvm_cfg.network.fwd_type }})"
    fail: msg="currently only support network.fwd_type = [ nat | bridge ]"
    when: kvm_cfg.network.fwd_type != "nat" and kvm_cfg.network.fwd_type != "bridge"

  - name: "LIBVIRT-SETUP: deploy xml template for nat network ({{ kvm_cfg.network.name }})"
    when: kvm_cfg.network.fwd_type == "nat"
    vars:
      - p_name:    "{{ kvm_cfg.network.name }}"
      - p_type:    "{{ kvm_cfg.network.fwd_type }}"
      - p_address: "{{ g_pubGW }}"
      - p_netmask: "{{ g_pubNM }}"
    template:
      src: "libvirt-net-nat.j2"
      dest: "/var/tmp/libvirt-network.xml"
      owner: root
      group: root
      mode: 0644

  - name: "LIBVIRT-SETUP: deploy xml template for bridge network ({{ kvm_cfg.network.name }})"
    when: kvm_cfg.network.fwd_type == "bridge"
    vars:
      - p_name:    "{{ kvm_cfg.network.name }}"
      - p_type:    "{{ kvm_cfg.network.fwd_type }}"
      - p_address: "{{ hostvars[item]['h_pubIP'] }}"
      - p_netmask: "{{ g_pubNM }}"
    template:
      src: "libvirt-net-bridge.j2"
      dest: "/var/tmp/libvirt-network.xml"
      owner: root
      group: root
      mode: 0644
    loop: "{{ groups['myVirthost'] }}"

  - name: "LIBVIRT-SETUP: test existence of bridge network ({{ kvm_cfg.network.bridge }})"
    when: 
      - test_libvirt_network.rc != 0
      - kvm_cfg.network.fwd_type == "bridge"
    shell: 
      cmd: |
        nmcli dev show "{{ kvm_cfg.network.bridge }}"
    ignore_errors: yes
    register: test_bridge_network

  - name: "LIBVIRT-SETUP: create bridge device ({{ kvm_cfg.network.name }})"
    when: 
      - test_libvirt_network.rc != 0 
      - test_bridge_network.rc != 0
      - kvm_cfg.network.fwd_type == "bridge"
    shell:
      cmd: |
        nmcli con add type bridge \
              con-name {{ kvm_cfg.network.bridge }} \
              ifname   {{ kvm_cfg.network.bridge }} \
              ip4      {{ kvm_cfg.network.ipv4.addr }} \
              gw4      {{ kvm_cfg.network.ipv4.gw }} \
              ipv4.dns {{ g_pubDNS }} \
              autoconnect yes bridge.stp no ipv6.method ignore

  - name: "LIBVIRT-SETUP: add device to bridge ({{ kvm_cfg.network.name }})"
    when: 
      - test_libvirt_network.rc != 0 
      - test_bridge_network.rc != 0
      - kvm_cfg.network.fwd_type == "bridge"
    shell:
      cmd: |
        nmcli con add type ethernet con-name {{ kvm_cfg.network.dev }} ifname {{ kvm_cfg.network.dev }} master {{ kvm_cfg.network.bridge }}
        nmcli con modify {{ kvm_cfg.network.bridge }} connection.autoconnect-slaves yes

  - name: "LIBVIRT-SETUP: bring up bridge ({{ kvm_cfg.network.name }})"
    when: 
      - test_libvirt_network.rc != 0 
      - test_bridge_network.rc != 0
      - kvm_cfg.network.fwd_type == "bridge"
    shell: 
      cmd: |
        ifdown {{ kvm_cfg.network.dev }}
        ifdown {{ kvm_cfg.network.bridge }}
        ifup   {{ kvm_cfg.network.bridge }}

  - name: "LIBVIRT-SETUP: create libvirt network ({{ kvm_cfg.network.name }})"
    when: test_libvirt_network.rc != 0
    shell:
      cmd: |
        virsh net-define /var/tmp/libvirt-network.xml

  - name: "LIBVIRT-SETUP: start libvirt network ({{ kvm_cfg.network.name }})"
    when: test_libvirt_network.rc != 0
    shell: 
      cmd: |
        virsh net-start {{ kvm_cfg.network.name }}

  - name: "LIBVIRT-SETUP: auto-start libvirt network ({{ kvm_cfg.network.name }})"
    when: test_libvirt_network.rc != 0
    shell:
      cmd: |
        virsh net-autostart {{ kvm_cfg.network.name }}

